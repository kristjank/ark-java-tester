/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ark.java.tester;

import com.google.gson.internal.LinkedTreeMap;
import org.arkecosystem.client.Connection;
import org.arkecosystem.client.api.two.Two;
import org.arkecosystem.crypto.configuration.Network;
import org.arkecosystem.crypto.networks.Devnet;
import org.arkecosystem.crypto.transactions.Transaction;
import org.arkecosystem.crypto.transactions.builder.Transfer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;

public class App {
    public static Transaction CreateDemoTransaction(int amount, String recipientAddress, String passphrase1) {
        Transaction actual = new Transfer()
                .recipient(recipientAddress)
                .amount(amount)
                .vendorField("Java1 \uD83D\uDD31 \uD83C\uDF7A")
                .sign(passphrase1)
                .transaction;

        return actual;
    }

    public static void main(String[] args) throws IOException {
        Network.set(new Devnet());
        HashMap<String, Object> map = new HashMap<>();
        // map.put("host", "http://IP:4003/api/"); // network settings are autoc-configured from the node
        map.put("host", "http://192.168.1.6:4003/api/");
        map.put("API-Version", 2);
        map.put("content-type","application/json");

        Connection<Two> connection2 = new Connection(map);

        // testing blocks endpoint // find block with height 545774
        // LinkedTreeMap<String, Object> actual = connection2.api().peers.all();
        // System.out.println(actual);



        // creating a transaction
        Transaction transfer1 = CreateDemoTransaction(1, "DQUjMT6fhJWbwhaYL5pPdX9v5qPiRcAzRb", "pass");
        System.out.println(transfer1.toJson());

        // creating a transaction
        Transaction transfer2 = CreateDemoTransaction(2, "DQUjMT6fhJWbwhaYL5pPdX9v5qPiRcAzRb", "pass");
        System.out.println(transfer2.toJson());

        // creating a transaction
        Transaction transfer3 = CreateDemoTransaction(3, "DQUjMT6fhJWbwhaYL5pPdX9v5qPiRcAzRb", "pass");
        System.out.println(transfer3.toJson());

        // adding transaction to payload, payload is an array of transactions
        ArrayList<HashMap> payload = new ArrayList<>();
        payload.add(transfer1.toHashMap());
        payload.add(transfer2.toHashMap());
        payload.add(transfer3.toHashMap());

        // posting transactions to the connected node as specified in the connection above
        LinkedTreeMap<String, Object> postResponse = connection2.api().transactions.create(payload);

        System.out.println(postResponse);
    }   
}
