/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ark.java.tester;

import com.google.gson.internal.LinkedTreeMap;
import org.arkecosystem.client.Connection;
import org.arkecosystem.crypto.configuration.Network;
import org.arkecosystem.crypto.networks.Devnet;
import org.arkecosystem.crypto.transactions.Transaction;
import org.arkecosystem.crypto.transactions.builder.Transfer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;

public class App {
    public static Transaction CreateDemoTransaction(int amount, String recipientAddress, String passphrase1) {
        Transaction actual = new Transfer()
                .recipient(recipientAddress)
                .amount(amount)
                .vendorField("Java \uD83D\uDD31 \uD83C\uDF7A")
                .sign(passphrase1)
                .transaction;

        return actual;
    }

    public static void main(String[] args) throws IOException {
        Network.set(new Devnet());
        HashMap<String, Object> map = new HashMap<>();
        // map.put("host", "http://IP:4003/api/"); // network settings are autoc-configured from the node
        map.put("host", "https://dexplorer.ark.io:8443/api/");
        map.put("content-type","application/json");

        Connection connection2 = new Connection(map);

        // testing blocks endpoint // find block with height 545774
        // LinkedTreeMap<String, Object> actual = connection2.api().peers.all();
        // System.out.println(actual);

        // adding transaction to payload, payload is an array of transactions
        ArrayList<HashMap> payload = new ArrayList<>();

        int x =  0;
        while (x < 1000) {
            for(int i = 1; i <= 40; i++) {
                // creating a transaction
                Transaction transfer1 = CreateDemoTransaction(i*x, "DQUjMT6fhJWbwhaYL5pPdX9v5qPiRcAzRb", "awesome deposit patient flush crystal choose tired security net section twin oblige");
                payload.add(transfer1.toHashMap());
                System.out.println(transfer1.toJson());
                

            }

            // posting transactions to the connected node as specified in the connection above
            LinkedTreeMap<String, Object> postResponse = connection2.api().transactions.create(payload);
            payload.clear();
            System.out.println(postResponse);
            x++;
        }
    }   
}
